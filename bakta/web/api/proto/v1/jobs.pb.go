// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bakta/web/api/proto/v1/jobs.proto

package api

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JobFailedStatus int32

const (
	JobFailedStatus_NOT_FOUND    JobFailedStatus = 0
	JobFailedStatus_UNAUTHORIZED JobFailedStatus = 1
)

// Enum value maps for JobFailedStatus.
var (
	JobFailedStatus_name = map[int32]string{
		0: "NOT_FOUND",
		1: "UNAUTHORIZED",
	}
	JobFailedStatus_value = map[string]int32{
		"NOT_FOUND":    0,
		"UNAUTHORIZED": 1,
	}
)

func (x JobFailedStatus) Enum() *JobFailedStatus {
	p := new(JobFailedStatus)
	*p = x
	return p
}

func (x JobFailedStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobFailedStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bakta_web_api_proto_v1_jobs_proto_enumTypes[0].Descriptor()
}

func (JobFailedStatus) Type() protoreflect.EnumType {
	return &file_bakta_web_api_proto_v1_jobs_proto_enumTypes[0]
}

func (x JobFailedStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobFailedStatus.Descriptor instead.
func (JobFailedStatus) EnumDescriptor() ([]byte, []int) {
	return file_bakta_web_api_proto_v1_jobs_proto_rawDescGZIP(), []int{0}
}

type DermType int32

const (
	DermType_UNKNOWN  DermType = 0
	DermType_MONODERM DermType = 1
	DermType_DIDERM   DermType = 2
)

// Enum value maps for DermType.
var (
	DermType_name = map[int32]string{
		0: "UNKNOWN",
		1: "MONODERM",
		2: "DIDERM",
	}
	DermType_value = map[string]int32{
		"UNKNOWN":  0,
		"MONODERM": 1,
		"DIDERM":   2,
	}
)

func (x DermType) Enum() *DermType {
	p := new(DermType)
	*p = x
	return p
}

func (x DermType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DermType) Descriptor() protoreflect.EnumDescriptor {
	return file_bakta_web_api_proto_v1_jobs_proto_enumTypes[1].Descriptor()
}

func (DermType) Type() protoreflect.EnumType {
	return &file_bakta_web_api_proto_v1_jobs_proto_enumTypes[1]
}

func (x DermType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DermType.Descriptor instead.
func (DermType) EnumDescriptor() ([]byte, []int) {
	return file_bakta_web_api_proto_v1_jobs_proto_rawDescGZIP(), []int{1}
}

type RepliconTableType int32

const (
	RepliconTableType_CSV RepliconTableType = 0
	RepliconTableType_TSV RepliconTableType = 1
)

// Enum value maps for RepliconTableType.
var (
	RepliconTableType_name = map[int32]string{
		0: "CSV",
		1: "TSV",
	}
	RepliconTableType_value = map[string]int32{
		"CSV": 0,
		"TSV": 1,
	}
)

func (x RepliconTableType) Enum() *RepliconTableType {
	p := new(RepliconTableType)
	*p = x
	return p
}

func (x RepliconTableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RepliconTableType) Descriptor() protoreflect.EnumDescriptor {
	return file_bakta_web_api_proto_v1_jobs_proto_enumTypes[2].Descriptor()
}

func (RepliconTableType) Type() protoreflect.EnumType {
	return &file_bakta_web_api_proto_v1_jobs_proto_enumTypes[2]
}

func (x RepliconTableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RepliconTableType.Descriptor instead.
func (RepliconTableType) EnumDescriptor() ([]byte, []int) {
	return file_bakta_web_api_proto_v1_jobs_proto_rawDescGZIP(), []int{2}
}

type JobStatusEnum int32

const (
	JobStatusEnum_INIT        JobStatusEnum = 0
	JobStatusEnum_RUNNING     JobStatusEnum = 1
	JobStatusEnum_SUCCESSFULL JobStatusEnum = 2
	JobStatusEnum_ERROR       JobStatusEnum = 3
)

// Enum value maps for JobStatusEnum.
var (
	JobStatusEnum_name = map[int32]string{
		0: "INIT",
		1: "RUNNING",
		2: "SUCCESSFULL",
		3: "ERROR",
	}
	JobStatusEnum_value = map[string]int32{
		"INIT":        0,
		"RUNNING":     1,
		"SUCCESSFULL": 2,
		"ERROR":       3,
	}
)

func (x JobStatusEnum) Enum() *JobStatusEnum {
	p := new(JobStatusEnum)
	*p = x
	return p
}

func (x JobStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_bakta_web_api_proto_v1_jobs_proto_enumTypes[3].Descriptor()
}

func (JobStatusEnum) Type() protoreflect.EnumType {
	return &file_bakta_web_api_proto_v1_jobs_proto_enumTypes[3]
}

func (x JobStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobStatusEnum.Descriptor instead.
func (JobStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_bakta_web_api_proto_v1_jobs_proto_rawDescGZIP(), []int{3}
}

type InitJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepliconTableType RepliconTableType `protobuf:"varint,1,opt,name=repliconTableType,proto3,enum=bakta.web.api.proto.v1.RepliconTableType" json:"repliconTableType,omitempty"`
	Name              string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *InitJobRequest) Reset() {
	*x = InitJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bakta_web_api_proto_v1_jobs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitJobRequest) ProtoMessage() {}

func (x *InitJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bakta_web_api_proto_v1_jobs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitJobRequest.ProtoReflect.Descriptor instead.
func (*InitJobRequest) Descriptor() ([]byte, []int) {
	return file_bakta_web_api_proto_v1_jobs_proto_rawDescGZIP(), []int{0}
}

func (x *InitJobRequest) GetRepliconTableType() RepliconTableType {
	if x != nil {
		return x.RepliconTableType
	}
	return RepliconTableType_CSV
}

func (x *InitJobRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToolVersion    string `protobuf:"bytes,1,opt,name=toolVersion,proto3" json:"toolVersion,omitempty"`
	DbVersion      string `protobuf:"bytes,2,opt,name=dbVersion,proto3" json:"dbVersion,omitempty"`
	BackendVersion string `protobuf:"bytes,3,opt,name=backendVersion,proto3" json:"backendVersion,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bakta_web_api_proto_v1_jobs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bakta_web_api_proto_v1_jobs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_bakta_web_api_proto_v1_jobs_proto_rawDescGZIP(), []int{1}
}

func (x *VersionResponse) GetToolVersion() string {
	if x != nil {
		return x.ToolVersion
	}
	return ""
}

func (x *VersionResponse) GetDbVersion() string {
	if x != nil {
		return x.DbVersion
	}
	return ""
}

func (x *VersionResponse) GetBackendVersion() string {
	if x != nil {
		return x.BackendVersion
	}
	return ""
}

type InitJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadLinkFasta     string   `protobuf:"bytes,1,opt,name=uploadLinkFasta,proto3" json:"uploadLinkFasta,omitempty"`
	UploadLinkProdigal  string   `protobuf:"bytes,2,opt,name=uploadLinkProdigal,proto3" json:"uploadLinkProdigal,omitempty"`
	UploadLinkReplicons string   `protobuf:"bytes,3,opt,name=uploadLinkReplicons,proto3" json:"uploadLinkReplicons,omitempty"`
	Job                 *JobAuth `protobuf:"bytes,4,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *InitJobResponse) Reset() {
	*x = InitJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bakta_web_api_proto_v1_jobs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitJobResponse) ProtoMessage() {}

func (x *InitJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bakta_web_api_proto_v1_jobs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitJobResponse.ProtoReflect.Descriptor instead.
func (*InitJobResponse) Descriptor() ([]byte, []int) {
	return file_bakta_web_api_proto_v1_jobs_proto_rawDescGZIP(), []int{2}
}

func (x *InitJobResponse) GetUploadLinkFasta() string {
	if x != nil {
		return x.UploadLinkFasta
	}
	return ""
}

func (x *InitJobResponse) GetUploadLinkProdigal() string {
	if x != nil {
		return x.UploadLinkProdigal
	}
	return ""
}

func (x *InitJobResponse) GetUploadLinkReplicons() string {
	if x != nil {
		return x.UploadLinkReplicons
	}
	return ""
}

func (x *InitJobResponse) GetJob() *JobAuth {
	if x != nil {
		return x.Job
	}
	return nil
}

type StartJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job    *JobAuth   `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	Config *JobConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *StartJobRequest) Reset() {
	*x = StartJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bakta_web_api_proto_v1_jobs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartJobRequest) ProtoMessage() {}

func (x *StartJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bakta_web_api_proto_v1_jobs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartJobRequest.ProtoReflect.Descriptor instead.
func (*StartJobRequest) Descriptor() ([]byte, []int) {
	return file_bakta_web_api_proto_v1_jobs_proto_rawDescGZIP(), []int{3}
}

func (x *StartJobRequest) GetJob() *JobAuth {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *StartJobRequest) GetConfig() *JobConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type JobConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasProdigal        bool     `protobuf:"varint,1,opt,name=hasProdigal,proto3" json:"hasProdigal,omitempty"`
	HasReplicons       bool     `protobuf:"varint,2,opt,name=hasReplicons,proto3" json:"hasReplicons,omitempty"`
	TranslationalTable int32    `protobuf:"varint,3,opt,name=translationalTable,proto3" json:"translationalTable,omitempty"`
	CompleteGenome     bool     `protobuf:"varint,4,opt,name=completeGenome,proto3" json:"completeGenome,omitempty"`
	KeepContigHeaders  bool     `protobuf:"varint,5,opt,name=keepContigHeaders,proto3" json:"keepContigHeaders,omitempty"`
	MinContigLength    int64    `protobuf:"varint,6,opt,name=minContigLength,proto3" json:"minContigLength,omitempty"`
	DermType           DermType `protobuf:"varint,7,opt,name=dermType,proto3,enum=bakta.web.api.proto.v1.DermType" json:"dermType,omitempty"`
	Genus              string   `protobuf:"bytes,8,opt,name=genus,proto3" json:"genus,omitempty"`
	Species            string   `protobuf:"bytes,9,opt,name=species,proto3" json:"species,omitempty"`
	Strain             string   `protobuf:"bytes,10,opt,name=strain,proto3" json:"strain,omitempty"`
	Plasmid            string   `protobuf:"bytes,11,opt,name=plasmid,proto3" json:"plasmid,omitempty"`
	Locus              string   `protobuf:"bytes,12,opt,name=locus,proto3" json:"locus,omitempty"`
	LocusTag           string   `protobuf:"bytes,13,opt,name=locus_tag,json=locusTag,proto3" json:"locus_tag,omitempty"`
	HasCompliant       bool     `protobuf:"varint,14,opt,name=hasCompliant,proto3" json:"hasCompliant,omitempty"`
}

func (x *JobConfig) Reset() {
	*x = JobConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bakta_web_api_proto_v1_jobs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobConfig) ProtoMessage() {}

func (x *JobConfig) ProtoReflect() protoreflect.Message {
	mi := &file_bakta_web_api_proto_v1_jobs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobConfig.ProtoReflect.Descriptor instead.
func (*JobConfig) Descriptor() ([]byte, []int) {
	return file_bakta_web_api_proto_v1_jobs_proto_rawDescGZIP(), []int{4}
}

func (x *JobConfig) GetHasProdigal() bool {
	if x != nil {
		return x.HasProdigal
	}
	return false
}

func (x *JobConfig) GetHasReplicons() bool {
	if x != nil {
		return x.HasReplicons
	}
	return false
}

func (x *JobConfig) GetTranslationalTable() int32 {
	if x != nil {
		return x.TranslationalTable
	}
	return 0
}

func (x *JobConfig) GetCompleteGenome() bool {
	if x != nil {
		return x.CompleteGenome
	}
	return false
}

func (x *JobConfig) GetKeepContigHeaders() bool {
	if x != nil {
		return x.KeepContigHeaders
	}
	return false
}

func (x *JobConfig) GetMinContigLength() int64 {
	if x != nil {
		return x.MinContigLength
	}
	return 0
}

func (x *JobConfig) GetDermType() DermType {
	if x != nil {
		return x.DermType
	}
	return DermType_UNKNOWN
}

func (x *JobConfig) GetGenus() string {
	if x != nil {
		return x.Genus
	}
	return ""
}

func (x *JobConfig) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *JobConfig) GetStrain() string {
	if x != nil {
		return x.Strain
	}
	return ""
}

func (x *JobConfig) GetPlasmid() string {
	if x != nil {
		return x.Plasmid
	}
	return ""
}

func (x *JobConfig) GetLocus() string {
	if x != nil {
		return x.Locus
	}
	return ""
}

func (x *JobConfig) GetLocusTag() string {
	if x != nil {
		return x.LocusTag
	}
	return ""
}

func (x *JobConfig) GetHasCompliant() bool {
	if x != nil {
		return x.HasCompliant
	}
	return false
}

type JobStatusReponseList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobs       []*JobStatusResponse `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
	FailedJobs []*FailedJob         `protobuf:"bytes,2,rep,name=failedJobs,proto3" json:"failedJobs,omitempty"`
}

func (x *JobStatusReponseList) Reset() {
	*x = JobStatusReponseList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bakta_web_api_proto_v1_jobs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStatusReponseList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatusReponseList) ProtoMessage() {}

func (x *JobStatusReponseList) ProtoReflect() protoreflect.Message {
	mi := &file_bakta_web_api_proto_v1_jobs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatusReponseList.ProtoReflect.Descriptor instead.
func (*JobStatusReponseList) Descriptor() ([]byte, []int) {
	return file_bakta_web_api_proto_v1_jobs_proto_rawDescGZIP(), []int{5}
}

func (x *JobStatusReponseList) GetJobs() []*JobStatusResponse {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *JobStatusReponseList) GetFailedJobs() []*FailedJob {
	if x != nil {
		return x.FailedJobs
	}
	return nil
}

type JobStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID     string                 `protobuf:"bytes,1,opt,name=jobID,proto3" json:"jobID,omitempty"`
	JobStatus JobStatusEnum          `protobuf:"varint,2,opt,name=jobStatus,proto3,enum=bakta.web.api.proto.v1.JobStatusEnum" json:"jobStatus,omitempty"`
	Started   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=started,proto3" json:"started,omitempty"`
	Updated   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated,proto3" json:"updated,omitempty"`
	Name      string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *JobStatusResponse) Reset() {
	*x = JobStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bakta_web_api_proto_v1_jobs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatusResponse) ProtoMessage() {}

func (x *JobStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bakta_web_api_proto_v1_jobs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatusResponse.ProtoReflect.Descriptor instead.
func (*JobStatusResponse) Descriptor() ([]byte, []int) {
	return file_bakta_web_api_proto_v1_jobs_proto_rawDescGZIP(), []int{6}
}

func (x *JobStatusResponse) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *JobStatusResponse) GetJobStatus() JobStatusEnum {
	if x != nil {
		return x.JobStatus
	}
	return JobStatusEnum_INIT
}

func (x *JobStatusResponse) GetStarted() *timestamppb.Timestamp {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *JobStatusResponse) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *JobStatusResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type JobResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID       string                 `protobuf:"bytes,1,opt,name=jobID,proto3" json:"jobID,omitempty"`
	ResultFiles *structpb.Struct       `protobuf:"bytes,2,opt,name=ResultFiles,proto3" json:"ResultFiles,omitempty"`
	Started     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=started,proto3" json:"started,omitempty"`
	Updated     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated,proto3" json:"updated,omitempty"`
	Name        string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *JobResultResponse) Reset() {
	*x = JobResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bakta_web_api_proto_v1_jobs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobResultResponse) ProtoMessage() {}

func (x *JobResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bakta_web_api_proto_v1_jobs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobResultResponse.ProtoReflect.Descriptor instead.
func (*JobResultResponse) Descriptor() ([]byte, []int) {
	return file_bakta_web_api_proto_v1_jobs_proto_rawDescGZIP(), []int{7}
}

func (x *JobResultResponse) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *JobResultResponse) GetResultFiles() *structpb.Struct {
	if x != nil {
		return x.ResultFiles
	}
	return nil
}

func (x *JobResultResponse) GetStarted() *timestamppb.Timestamp {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *JobResultResponse) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *JobResultResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type JobStatusRequestList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobs []*JobAuth `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *JobStatusRequestList) Reset() {
	*x = JobStatusRequestList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bakta_web_api_proto_v1_jobs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobStatusRequestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobStatusRequestList) ProtoMessage() {}

func (x *JobStatusRequestList) ProtoReflect() protoreflect.Message {
	mi := &file_bakta_web_api_proto_v1_jobs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobStatusRequestList.ProtoReflect.Descriptor instead.
func (*JobStatusRequestList) Descriptor() ([]byte, []int) {
	return file_bakta_web_api_proto_v1_jobs_proto_rawDescGZIP(), []int{8}
}

func (x *JobStatusRequestList) GetJobs() []*JobAuth {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type FailedJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID     string          `protobuf:"bytes,1,opt,name=jobID,proto3" json:"jobID,omitempty"`
	JobStatus JobFailedStatus `protobuf:"varint,2,opt,name=jobStatus,proto3,enum=bakta.web.api.proto.v1.JobFailedStatus" json:"jobStatus,omitempty"`
}

func (x *FailedJob) Reset() {
	*x = FailedJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bakta_web_api_proto_v1_jobs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailedJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailedJob) ProtoMessage() {}

func (x *FailedJob) ProtoReflect() protoreflect.Message {
	mi := &file_bakta_web_api_proto_v1_jobs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailedJob.ProtoReflect.Descriptor instead.
func (*FailedJob) Descriptor() ([]byte, []int) {
	return file_bakta_web_api_proto_v1_jobs_proto_rawDescGZIP(), []int{9}
}

func (x *FailedJob) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *FailedJob) GetJobStatus() JobFailedStatus {
	if x != nil {
		return x.JobStatus
	}
	return JobFailedStatus_NOT_FOUND
}

type JobAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Secret string `protobuf:"bytes,1,opt,name=secret,proto3" json:"secret,omitempty"`
	JobID  string `protobuf:"bytes,2,opt,name=jobID,proto3" json:"jobID,omitempty"`
}

func (x *JobAuth) Reset() {
	*x = JobAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bakta_web_api_proto_v1_jobs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobAuth) ProtoMessage() {}

func (x *JobAuth) ProtoReflect() protoreflect.Message {
	mi := &file_bakta_web_api_proto_v1_jobs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobAuth.ProtoReflect.Descriptor instead.
func (*JobAuth) Descriptor() ([]byte, []int) {
	return file_bakta_web_api_proto_v1_jobs_proto_rawDescGZIP(), []int{10}
}

func (x *JobAuth) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *JobAuth) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bakta_web_api_proto_v1_jobs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_bakta_web_api_proto_v1_jobs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_bakta_web_api_proto_v1_jobs_proto_rawDescGZIP(), []int{11}
}

var File_bakta_web_api_proto_v1_jobs_proto protoreflect.FileDescriptor

var file_bakta_web_api_proto_v1_jobs_proto_rawDesc = []byte{
	0x0a, 0x21, 0x62, 0x61, 0x6b, 0x74, 0x61, 0x2f, 0x77, 0x65, 0x62, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x16, 0x62, 0x61, 0x6b, 0x74, 0x61, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x5f, 0x67, 0x65,
	0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7d, 0x0a, 0x0e, 0x49, 0x6e, 0x69, 0x74, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x62, 0x61, 0x6b, 0x74, 0x61, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x79, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f,
	0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x62, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x62,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xd0, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6e,
	0x6b, 0x46, 0x61, 0x73, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x46, 0x61, 0x73, 0x74, 0x61, 0x12, 0x2e, 0x0a,
	0x12, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x64, 0x69,
	0x67, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x64, 0x69, 0x67, 0x61, 0x6c, 0x12, 0x30, 0x0a,
	0x13, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x6f, 0x6e, 0x73, 0x12,
	0x31, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62,
	0x61, 0x6b, 0x74, 0x61, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x41, 0x75, 0x74, 0x68, 0x52, 0x03, 0x6a,
	0x6f, 0x62, 0x22, 0x7f, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x6b, 0x74, 0x61, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x61, 0x6b, 0x74, 0x61,
	0x2e, 0x77, 0x65, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0xf8, 0x03, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x69, 0x67, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x69,
	0x67, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x6b, 0x65, 0x65, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6b, 0x65, 0x65, 0x70,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x67, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x08, 0x64, 0x65, 0x72, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x6b, 0x74,
	0x61, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x65, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x6c, 0x61, 0x73, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x75, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x75, 0x73, 0x54, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x61,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x22, 0x98,
	0x01, 0x0a, 0x14, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x61, 0x6b, 0x74, 0x61, 0x2e, 0x77, 0x65,
	0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4a,
	0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x4a, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x61, 0x6b,
	0x74, 0x61, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x52, 0x0a, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x73, 0x22, 0xee, 0x01, 0x0a, 0x11, 0x4a, 0x6f,
	0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62, 0x61, 0x6b, 0x74, 0x61,
	0x2e, 0x77, 0x65, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x09, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x11, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x4b, 0x0a, 0x14, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x04, 0x6a, 0x6f, 0x62,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x6b, 0x74, 0x61, 0x2e,
	0x77, 0x65, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x4a, 0x6f, 0x62, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x22, 0x68,
	0x0a, 0x09, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4a, 0x6f, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x44, 0x12, 0x45, 0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x62, 0x61, 0x6b, 0x74, 0x61, 0x2e, 0x77, 0x65, 0x62,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f,
	0x62, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6a,
	0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x37, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x41,
	0x75, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x44, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x2a, 0x32, 0x0a, 0x0f, 0x4a, 0x6f,
	0x62, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a,
	0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x31,
	0x0a, 0x08, 0x44, 0x65, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x4e, 0x4f, 0x44,
	0x45, 0x52, 0x4d, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x49, 0x44, 0x45, 0x52, 0x4d, 0x10,
	0x02, 0x2a, 0x25, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x6f, 0x6e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x53, 0x56, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x54, 0x53, 0x56, 0x10, 0x01, 0x2a, 0x42, 0x0a, 0x0d, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x49,
	0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x46, 0x55, 0x4c, 0x4c, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x32, 0xc4, 0x05, 0x0a,
	0x09, 0x42, 0x61, 0x6b, 0x74, 0x61, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x77, 0x0a, 0x07, 0x49, 0x6e,
	0x69, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x26, 0x2e, 0x62, 0x61, 0x6b, 0x74, 0x61, 0x2e, 0x77, 0x65,
	0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x62, 0x61, 0x6b, 0x74, 0x61, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x2f, 0x69, 0x6e, 0x69, 0x74,
	0x3a, 0x01, 0x2a, 0x12, 0x70, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f, 0x62, 0x12,
	0x27, 0x2e, 0x62, 0x61, 0x6b, 0x74, 0x61, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x62, 0x61, 0x6b, 0x74, 0x61,
	0x2e, 0x77, 0x65, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22,
	0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x2f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x85, 0x01, 0x0a, 0x0a, 0x4a, 0x6f, 0x62, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x2e, 0x62, 0x61, 0x6b, 0x74, 0x61, 0x2e, 0x77, 0x65, 0x62,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f,
	0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x62, 0x61, 0x6b, 0x74, 0x61, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x76, 0x0a,
	0x09, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x2e, 0x62, 0x61, 0x6b,
	0x74, 0x61, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x29, 0x2e, 0x62, 0x61,
	0x6b, 0x74, 0x61, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x2f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x6a, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x2e, 0x62, 0x61, 0x6b, 0x74, 0x61, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x27, 0x2e, 0x62, 0x61, 0x6b, 0x74, 0x61, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11,
	0x12, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x60, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x62, 0x61,
	0x6b, 0x74, 0x61, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x41, 0x75, 0x74, 0x68, 0x1a, 0x1d, 0x2e, 0x62,
	0x61, 0x6b, 0x74, 0x61, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x16, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x10, 0x2a, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0xef, 0x01, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x67, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x2d, 0x62, 0x69, 0x6f, 0x2f, 0x62, 0x61, 0x6b, 0x74, 0x61, 0x2d, 0x77, 0x65,
	0x62, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x92, 0x41, 0xb5, 0x01,
	0x12, 0x17, 0x0a, 0x0e, 0x42, 0x61, 0x6b, 0x74, 0x61, 0x20, 0x4a, 0x6f, 0x62, 0x73, 0x20, 0x41,
	0x50, 0x49, 0x22, 0x00, 0x32, 0x03, 0x30, 0x2e, 0x31, 0x2a, 0x02, 0x02, 0x01, 0x32, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f,
	0x6e, 0x52, 0x3b, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x34, 0x0a, 0x2a, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x07, 0x5a, 0x23,
	0x0a, 0x21, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x12, 0x13,
	0x08, 0x02, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x02, 0x62, 0x10, 0x0a, 0x0e, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41,
	0x75, 0x74, 0x68, 0x12, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bakta_web_api_proto_v1_jobs_proto_rawDescOnce sync.Once
	file_bakta_web_api_proto_v1_jobs_proto_rawDescData = file_bakta_web_api_proto_v1_jobs_proto_rawDesc
)

func file_bakta_web_api_proto_v1_jobs_proto_rawDescGZIP() []byte {
	file_bakta_web_api_proto_v1_jobs_proto_rawDescOnce.Do(func() {
		file_bakta_web_api_proto_v1_jobs_proto_rawDescData = protoimpl.X.CompressGZIP(file_bakta_web_api_proto_v1_jobs_proto_rawDescData)
	})
	return file_bakta_web_api_proto_v1_jobs_proto_rawDescData
}

var file_bakta_web_api_proto_v1_jobs_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_bakta_web_api_proto_v1_jobs_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_bakta_web_api_proto_v1_jobs_proto_goTypes = []interface{}{
	(JobFailedStatus)(0),          // 0: bakta.web.api.proto.v1.JobFailedStatus
	(DermType)(0),                 // 1: bakta.web.api.proto.v1.DermType
	(RepliconTableType)(0),        // 2: bakta.web.api.proto.v1.RepliconTableType
	(JobStatusEnum)(0),            // 3: bakta.web.api.proto.v1.JobStatusEnum
	(*InitJobRequest)(nil),        // 4: bakta.web.api.proto.v1.InitJobRequest
	(*VersionResponse)(nil),       // 5: bakta.web.api.proto.v1.VersionResponse
	(*InitJobResponse)(nil),       // 6: bakta.web.api.proto.v1.InitJobResponse
	(*StartJobRequest)(nil),       // 7: bakta.web.api.proto.v1.StartJobRequest
	(*JobConfig)(nil),             // 8: bakta.web.api.proto.v1.JobConfig
	(*JobStatusReponseList)(nil),  // 9: bakta.web.api.proto.v1.JobStatusReponseList
	(*JobStatusResponse)(nil),     // 10: bakta.web.api.proto.v1.JobStatusResponse
	(*JobResultResponse)(nil),     // 11: bakta.web.api.proto.v1.JobResultResponse
	(*JobStatusRequestList)(nil),  // 12: bakta.web.api.proto.v1.JobStatusRequestList
	(*FailedJob)(nil),             // 13: bakta.web.api.proto.v1.FailedJob
	(*JobAuth)(nil),               // 14: bakta.web.api.proto.v1.JobAuth
	(*Empty)(nil),                 // 15: bakta.web.api.proto.v1.Empty
	(*timestamppb.Timestamp)(nil), // 16: google.protobuf.Timestamp
	(*structpb.Struct)(nil),       // 17: google.protobuf.Struct
}
var file_bakta_web_api_proto_v1_jobs_proto_depIdxs = []int32{
	2,  // 0: bakta.web.api.proto.v1.InitJobRequest.repliconTableType:type_name -> bakta.web.api.proto.v1.RepliconTableType
	14, // 1: bakta.web.api.proto.v1.InitJobResponse.job:type_name -> bakta.web.api.proto.v1.JobAuth
	14, // 2: bakta.web.api.proto.v1.StartJobRequest.job:type_name -> bakta.web.api.proto.v1.JobAuth
	8,  // 3: bakta.web.api.proto.v1.StartJobRequest.config:type_name -> bakta.web.api.proto.v1.JobConfig
	1,  // 4: bakta.web.api.proto.v1.JobConfig.dermType:type_name -> bakta.web.api.proto.v1.DermType
	10, // 5: bakta.web.api.proto.v1.JobStatusReponseList.jobs:type_name -> bakta.web.api.proto.v1.JobStatusResponse
	13, // 6: bakta.web.api.proto.v1.JobStatusReponseList.failedJobs:type_name -> bakta.web.api.proto.v1.FailedJob
	3,  // 7: bakta.web.api.proto.v1.JobStatusResponse.jobStatus:type_name -> bakta.web.api.proto.v1.JobStatusEnum
	16, // 8: bakta.web.api.proto.v1.JobStatusResponse.started:type_name -> google.protobuf.Timestamp
	16, // 9: bakta.web.api.proto.v1.JobStatusResponse.updated:type_name -> google.protobuf.Timestamp
	17, // 10: bakta.web.api.proto.v1.JobResultResponse.ResultFiles:type_name -> google.protobuf.Struct
	16, // 11: bakta.web.api.proto.v1.JobResultResponse.started:type_name -> google.protobuf.Timestamp
	16, // 12: bakta.web.api.proto.v1.JobResultResponse.updated:type_name -> google.protobuf.Timestamp
	14, // 13: bakta.web.api.proto.v1.JobStatusRequestList.jobs:type_name -> bakta.web.api.proto.v1.JobAuth
	0,  // 14: bakta.web.api.proto.v1.FailedJob.jobStatus:type_name -> bakta.web.api.proto.v1.JobFailedStatus
	4,  // 15: bakta.web.api.proto.v1.BaktaJobs.InitJob:input_type -> bakta.web.api.proto.v1.InitJobRequest
	7,  // 16: bakta.web.api.proto.v1.BaktaJobs.StartJob:input_type -> bakta.web.api.proto.v1.StartJobRequest
	12, // 17: bakta.web.api.proto.v1.BaktaJobs.JobsStatus:input_type -> bakta.web.api.proto.v1.JobStatusRequestList
	14, // 18: bakta.web.api.proto.v1.BaktaJobs.JobResult:input_type -> bakta.web.api.proto.v1.JobAuth
	15, // 19: bakta.web.api.proto.v1.BaktaJobs.Version:input_type -> bakta.web.api.proto.v1.Empty
	14, // 20: bakta.web.api.proto.v1.BaktaJobs.Delete:input_type -> bakta.web.api.proto.v1.JobAuth
	6,  // 21: bakta.web.api.proto.v1.BaktaJobs.InitJob:output_type -> bakta.web.api.proto.v1.InitJobResponse
	15, // 22: bakta.web.api.proto.v1.BaktaJobs.StartJob:output_type -> bakta.web.api.proto.v1.Empty
	9,  // 23: bakta.web.api.proto.v1.BaktaJobs.JobsStatus:output_type -> bakta.web.api.proto.v1.JobStatusReponseList
	11, // 24: bakta.web.api.proto.v1.BaktaJobs.JobResult:output_type -> bakta.web.api.proto.v1.JobResultResponse
	5,  // 25: bakta.web.api.proto.v1.BaktaJobs.Version:output_type -> bakta.web.api.proto.v1.VersionResponse
	15, // 26: bakta.web.api.proto.v1.BaktaJobs.Delete:output_type -> bakta.web.api.proto.v1.Empty
	21, // [21:27] is the sub-list for method output_type
	15, // [15:21] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_bakta_web_api_proto_v1_jobs_proto_init() }
func file_bakta_web_api_proto_v1_jobs_proto_init() {
	if File_bakta_web_api_proto_v1_jobs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bakta_web_api_proto_v1_jobs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bakta_web_api_proto_v1_jobs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bakta_web_api_proto_v1_jobs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bakta_web_api_proto_v1_jobs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bakta_web_api_proto_v1_jobs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bakta_web_api_proto_v1_jobs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobStatusReponseList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bakta_web_api_proto_v1_jobs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bakta_web_api_proto_v1_jobs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bakta_web_api_proto_v1_jobs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobStatusRequestList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bakta_web_api_proto_v1_jobs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailedJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bakta_web_api_proto_v1_jobs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bakta_web_api_proto_v1_jobs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bakta_web_api_proto_v1_jobs_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bakta_web_api_proto_v1_jobs_proto_goTypes,
		DependencyIndexes: file_bakta_web_api_proto_v1_jobs_proto_depIdxs,
		EnumInfos:         file_bakta_web_api_proto_v1_jobs_proto_enumTypes,
		MessageInfos:      file_bakta_web_api_proto_v1_jobs_proto_msgTypes,
	}.Build()
	File_bakta_web_api_proto_v1_jobs_proto = out.File
	file_bakta_web_api_proto_v1_jobs_proto_rawDesc = nil
	file_bakta_web_api_proto_v1_jobs_proto_goTypes = nil
	file_bakta_web_api_proto_v1_jobs_proto_depIdxs = nil
}
