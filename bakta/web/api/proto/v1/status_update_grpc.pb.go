// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BaktaStatusUpdateClient is the client API for BaktaStatusUpdate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BaktaStatusUpdateClient interface {
	UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*Empty, error)
}

type baktaStatusUpdateClient struct {
	cc grpc.ClientConnInterface
}

func NewBaktaStatusUpdateClient(cc grpc.ClientConnInterface) BaktaStatusUpdateClient {
	return &baktaStatusUpdateClient{cc}
}

func (c *baktaStatusUpdateClient) UpdateStatus(ctx context.Context, in *UpdateStatusRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/bakta.web.api.proto.v1.BaktaStatusUpdate/UpdateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaktaStatusUpdateServer is the server API for BaktaStatusUpdate service.
// All implementations should embed UnimplementedBaktaStatusUpdateServer
// for forward compatibility
type BaktaStatusUpdateServer interface {
	UpdateStatus(context.Context, *UpdateStatusRequest) (*Empty, error)
}

// UnimplementedBaktaStatusUpdateServer should be embedded to have forward compatible implementations.
type UnimplementedBaktaStatusUpdateServer struct {
}

func (UnimplementedBaktaStatusUpdateServer) UpdateStatus(context.Context, *UpdateStatusRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}

// UnsafeBaktaStatusUpdateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaktaStatusUpdateServer will
// result in compilation errors.
type UnsafeBaktaStatusUpdateServer interface {
	mustEmbedUnimplementedBaktaStatusUpdateServer()
}

func RegisterBaktaStatusUpdateServer(s grpc.ServiceRegistrar, srv BaktaStatusUpdateServer) {
	s.RegisterService(&BaktaStatusUpdate_ServiceDesc, srv)
}

func _BaktaStatusUpdate_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaktaStatusUpdateServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bakta.web.api.proto.v1.BaktaStatusUpdate/UpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaktaStatusUpdateServer).UpdateStatus(ctx, req.(*UpdateStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BaktaStatusUpdate_ServiceDesc is the grpc.ServiceDesc for BaktaStatusUpdate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BaktaStatusUpdate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bakta.web.api.proto.v1.BaktaStatusUpdate",
	HandlerType: (*BaktaStatusUpdateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateStatus",
			Handler:    _BaktaStatusUpdate_UpdateStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bakta/web/api/proto/v1/status_update.proto",
}
